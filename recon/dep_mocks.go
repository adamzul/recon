// Code generated by MockGen. DO NOT EDIT.
// Source: dep.go
//
// Generated by this command:
//
//	mockgen -typed -source=dep.go -destination=dep_mocks.go -package=recon
//

// Package recon is a generated GoMock package.
package recon

import (
	reflect "reflect"

	excelize "github.com/xuri/excelize/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockExcelWriterFactory is a mock of ExcelWriterFactory interface.
type MockExcelWriterFactory struct {
	ctrl     *gomock.Controller
	recorder *MockExcelWriterFactoryMockRecorder
	isgomock struct{}
}

// MockExcelWriterFactoryMockRecorder is the mock recorder for MockExcelWriterFactory.
type MockExcelWriterFactoryMockRecorder struct {
	mock *MockExcelWriterFactory
}

// NewMockExcelWriterFactory creates a new mock instance.
func NewMockExcelWriterFactory(ctrl *gomock.Controller) *MockExcelWriterFactory {
	mock := &MockExcelWriterFactory{ctrl: ctrl}
	mock.recorder = &MockExcelWriterFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExcelWriterFactory) EXPECT() *MockExcelWriterFactoryMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockExcelWriterFactory) New(path string) (ExcelWriter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", path)
	ret0, _ := ret[0].(ExcelWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockExcelWriterFactoryMockRecorder) New(path any) *MockExcelWriterFactoryNewCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockExcelWriterFactory)(nil).New), path)
	return &MockExcelWriterFactoryNewCall{Call: call}
}

// MockExcelWriterFactoryNewCall wrap *gomock.Call
type MockExcelWriterFactoryNewCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExcelWriterFactoryNewCall) Return(arg0 ExcelWriter, arg1 error) *MockExcelWriterFactoryNewCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExcelWriterFactoryNewCall) Do(f func(string) (ExcelWriter, error)) *MockExcelWriterFactoryNewCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExcelWriterFactoryNewCall) DoAndReturn(f func(string) (ExcelWriter, error)) *MockExcelWriterFactoryNewCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockExcelWriter is a mock of ExcelWriter interface.
type MockExcelWriter struct {
	ctrl     *gomock.Controller
	recorder *MockExcelWriterMockRecorder
	isgomock struct{}
}

// MockExcelWriterMockRecorder is the mock recorder for MockExcelWriter.
type MockExcelWriterMockRecorder struct {
	mock *MockExcelWriter
}

// NewMockExcelWriter creates a new mock instance.
func NewMockExcelWriter(ctrl *gomock.Controller) *MockExcelWriter {
	mock := &MockExcelWriter{ctrl: ctrl}
	mock.recorder = &MockExcelWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExcelWriter) EXPECT() *MockExcelWriterMockRecorder {
	return m.recorder
}

// GetSheetIndex mocks base method.
func (m *MockExcelWriter) GetSheetIndex(name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSheetIndex", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSheetIndex indicates an expected call of GetSheetIndex.
func (mr *MockExcelWriterMockRecorder) GetSheetIndex(name any) *MockExcelWriterGetSheetIndexCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSheetIndex", reflect.TypeOf((*MockExcelWriter)(nil).GetSheetIndex), name)
	return &MockExcelWriterGetSheetIndexCall{Call: call}
}

// MockExcelWriterGetSheetIndexCall wrap *gomock.Call
type MockExcelWriterGetSheetIndexCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExcelWriterGetSheetIndexCall) Return(arg0 int, arg1 error) *MockExcelWriterGetSheetIndexCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExcelWriterGetSheetIndexCall) Do(f func(string) (int, error)) *MockExcelWriterGetSheetIndexCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExcelWriterGetSheetIndexCall) DoAndReturn(f func(string) (int, error)) *MockExcelWriterGetSheetIndexCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewSheet mocks base method.
func (m *MockExcelWriter) NewSheet(name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSheet", name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSheet indicates an expected call of NewSheet.
func (mr *MockExcelWriterMockRecorder) NewSheet(name any) *MockExcelWriterNewSheetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSheet", reflect.TypeOf((*MockExcelWriter)(nil).NewSheet), name)
	return &MockExcelWriterNewSheetCall{Call: call}
}

// MockExcelWriterNewSheetCall wrap *gomock.Call
type MockExcelWriterNewSheetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExcelWriterNewSheetCall) Return(arg0 int, arg1 error) *MockExcelWriterNewSheetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExcelWriterNewSheetCall) Do(f func(string) (int, error)) *MockExcelWriterNewSheetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExcelWriterNewSheetCall) DoAndReturn(f func(string) (int, error)) *MockExcelWriterNewSheetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveAs mocks base method.
func (m *MockExcelWriter) SaveAs(name string, options ...excelize.Options) error {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveAs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAs indicates an expected call of SaveAs.
func (mr *MockExcelWriterMockRecorder) SaveAs(name any, options ...any) *MockExcelWriterSaveAsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, options...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveAs", reflect.TypeOf((*MockExcelWriter)(nil).SaveAs), varargs...)
	return &MockExcelWriterSaveAsCall{Call: call}
}

// MockExcelWriterSaveAsCall wrap *gomock.Call
type MockExcelWriterSaveAsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExcelWriterSaveAsCall) Return(arg0 error) *MockExcelWriterSaveAsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExcelWriterSaveAsCall) Do(f func(string, ...excelize.Options) error) *MockExcelWriterSaveAsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExcelWriterSaveAsCall) DoAndReturn(f func(string, ...excelize.Options) error) *MockExcelWriterSaveAsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCellValue mocks base method.
func (m *MockExcelWriter) SetCellValue(sheet, axis string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCellValue", sheet, axis, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCellValue indicates an expected call of SetCellValue.
func (mr *MockExcelWriterMockRecorder) SetCellValue(sheet, axis, value any) *MockExcelWriterSetCellValueCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCellValue", reflect.TypeOf((*MockExcelWriter)(nil).SetCellValue), sheet, axis, value)
	return &MockExcelWriterSetCellValueCall{Call: call}
}

// MockExcelWriterSetCellValueCall wrap *gomock.Call
type MockExcelWriterSetCellValueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExcelWriterSetCellValueCall) Return(arg0 error) *MockExcelWriterSetCellValueCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExcelWriterSetCellValueCall) Do(f func(string, string, any) error) *MockExcelWriterSetCellValueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExcelWriterSetCellValueCall) DoAndReturn(f func(string, string, any) error) *MockExcelWriterSetCellValueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockReaderFactory is a mock of ReaderFactory interface.
type MockReaderFactory struct {
	ctrl     *gomock.Controller
	recorder *MockReaderFactoryMockRecorder
	isgomock struct{}
}

// MockReaderFactoryMockRecorder is the mock recorder for MockReaderFactory.
type MockReaderFactoryMockRecorder struct {
	mock *MockReaderFactory
}

// NewMockReaderFactory creates a new mock instance.
func NewMockReaderFactory(ctrl *gomock.Controller) *MockReaderFactory {
	mock := &MockReaderFactory{ctrl: ctrl}
	mock.recorder = &MockReaderFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReaderFactory) EXPECT() *MockReaderFactoryMockRecorder {
	return m.recorder
}

// NewReader mocks base method.
func (m *MockReaderFactory) NewReader(filename string) (Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewReader", filename)
	ret0, _ := ret[0].(Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewReader indicates an expected call of NewReader.
func (mr *MockReaderFactoryMockRecorder) NewReader(filename any) *MockReaderFactoryNewReaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewReader", reflect.TypeOf((*MockReaderFactory)(nil).NewReader), filename)
	return &MockReaderFactoryNewReaderCall{Call: call}
}

// MockReaderFactoryNewReaderCall wrap *gomock.Call
type MockReaderFactoryNewReaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReaderFactoryNewReaderCall) Return(arg0 Reader, arg1 error) *MockReaderFactoryNewReaderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReaderFactoryNewReaderCall) Do(f func(string) (Reader, error)) *MockReaderFactoryNewReaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReaderFactoryNewReaderCall) DoAndReturn(f func(string) (Reader, error)) *MockReaderFactoryNewReaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
	isgomock struct{}
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockReader) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockReaderMockRecorder) Close() *MockReaderCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockReader)(nil).Close))
	return &MockReaderCloseCall{Call: call}
}

// MockReaderCloseCall wrap *gomock.Call
type MockReaderCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReaderCloseCall) Return(arg0 error) *MockReaderCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReaderCloseCall) Do(f func() error) *MockReaderCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReaderCloseCall) DoAndReturn(f func() error) *MockReaderCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadAll mocks base method.
func (m *MockReader) ReadAll() ([][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll")
	ret0, _ := ret[0].([][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockReaderMockRecorder) ReadAll() *MockReaderReadAllCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockReader)(nil).ReadAll))
	return &MockReaderReadAllCall{Call: call}
}

// MockReaderReadAllCall wrap *gomock.Call
type MockReaderReadAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReaderReadAllCall) Return(arg0 [][]string, arg1 error) *MockReaderReadAllCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReaderReadAllCall) Do(f func() ([][]string, error)) *MockReaderReadAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReaderReadAllCall) DoAndReturn(f func() ([][]string, error)) *MockReaderReadAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
